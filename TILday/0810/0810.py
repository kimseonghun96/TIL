'''
2차원 배열의 선언
1차원 list를 묶어놓은 list
2차원 list의 선언 : 세로길이(행의 개수), 가로길이(열의 개수)를 필요로 함
python에서는 데이터 초기화를 통해 변수 선언과 초기화가 가능함
arr = [[0, 1, 2, 3], [4,5.6,7]] #2행 4열의 2차원 list
'''

# N = int(input())
# arr = [list(map(int, input().split())) for _ in range(N)]

# print(arr) # 3 [[123], [456], [789]] 적을때 숫자 사이 띄어쓰기 하면 [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# N = int(input())
# arr = [list(map(int, input())) for _ in range(N)]

# print(arr) #[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# N = int(input())
# arr = [list(map(int, input())) for _ in range(N)]
#
# for i in range(N):
#   for j in range(N):
#     print(arr[i][j], end = ' ')
#   print()  #1 2 3 /t 4 5 6 /t 7 8 9 /t 형식으로 나타남


# N, M = map(int, input().split()) #2 4 /t 1 2 3 4 /t 5 6 7 8
# arr = [list(map(int, input().split())) for _ in range(N)]
#
# for i in range(N):
#   for j in range(M):
#     print(arr[i][j], end = ' ')
#   print()

'''
배열 순회
n X m 배열의 n*m개의 모든 원소를 빠짐없이 조사하는 방법

행 우선 순회
i 행의 좌표
j 열의 좌표
for i in range(n)
  for j in range(m)
    arr([i],[j], #필요한 연산 수행)

열 우선 순회
i 행의 좌표
j 열의 좌표
for j in range(n)
  for i in range(m)
    arr([i],[j], #필요한 연산 수행)

지그재그 순회
for j in range(n)
  for i in range(m)
    arr([i],[j + (m-1-2*j]*(i*2%)] #(m-1-2*j]*(i*2%) 짝수 일 때 날라간다.
 if 문 사용할 수도
'''

'''
델타를 이용한 2차 배열탐 탐색 다시들어보자
2차 배열의 한 좌표에서 4방향의 인접 배열 요소를 탐색하는 방법
'''
#di dj를 배열에 만들고 하는 방법
# di = []
# dj = []
# N = 3 dj[k]
#             if 0<=ni<N and 0<= nj<M:
#                 print(ni, nj)
#
# for i in range(N):
#     for j in range(M):
#         for di, dj in [[0, 1], [1, 0]], [0, -1], [-1, 0]]:
#             ni, nj = i + di, j +dj
#             if 0 <= ni < N and 0<=nj<M:
# M = 4
# arr = [[1, 2, 3, 4], [5, 6, 7, 8]]
# for i in range(N):
#     for j in range(M):
#         for k in range(4):
#             ni = i + di[k]
#             nj = j +

#전치행렬 코드적기

'''
부분집합 합 문제
-유한 개의 정수로 이루어진 집합이 있을 때, 이 집합의 부분집합 중에서
그 집합의 원소를 모두 더한 값이 0이 되는 경우가 있는지를 알아내는 문제

예를 들어, [-7, -3, -2, 5, 8]라는 집합이 있으 ㄹ때, [-3, -2, 5]는 이 집합의
부분집합이면서 (-3)+(-2)+5 = 0이므로 이 경우의 답은 참이 된다.

부분집합 생성하기
-완전검색 기법으로 부분집합 합 문제를 풀기 위해서는 우선, 집합의 모든 부분집합을 생성한
후에 각 부분집합의 합을 계산해야한다
-주어진 집합의 부분집합을 생성하는 방법에 대해서 생각해보자

부분집합 생성하기
부분집합의 수
-집합의 원소가 n개일 때, 공집합을 포함한 부분집합의 수는 2**n개이다.
-이는 각 원소를 부분집합에 포함시키거나 포함시키지 않는 2가지 경우를 모든
원소에 적용한 경우의 수와 같다.
ex) 1, 2, 3, 4 ->2x2x2x2 = 16가지

-각 원소가 부분집합에 포함되었는지를 loop 이용하여 확인하고 부분집합을 생성하는 방법
bit = [0, 0, 0, 0]
for i in range(2):
    bit[0] = i                             # 0번째 원소
    for j in range(2):
        bit[1] = j                         # 1번째 원소
        for k in range(2):
           bit[2] = k                      # 2번째 원소
              for 1 in range(2):           
                  bit[3] = 1               # 3번째 원소
                  print_subset(bit)               # 생성된 부분집합
'''

'''
비트 연산자
& : 비트 단위로 AND 연산을 한다.
| : 비트 단위로 OR 연산을 한다.
<< : 피연산자의 비트 열을 왼쪽으로 이동시킨다.
>> : 피연산자의 비트 열을 오른쪽을 이동시킨다.

<<연산자
- 1 << n:2**n 즉, 원소가 n개일 경우의 모든 부분집합의 수를 의미한다. 2의 n제곱으로 해석 

& 연산자
- i&(1<ㅓ):의 j번째 비트가 1인지 아닌지를 검사한다.

#보다 간결하게 부분집합을 생성하는 방법
arr = [3, 6, 7, 1, 5, 4]

n=len(arr)        #원소의 개수

for i in range(1<<n):                  #1<<n : 부분 집합의 개수
    for j in range(n):                 # 원소의 수만큼 비트를 비교함
        if i &(1<<j):                  # i의 j번 비트가 1인 경우
            print(arr[j], end = ", ")       #j번 원소 출력
    print()
print()

#검색
-저장되어 있는 자료 중에서 원하는 항목을 찾는 작업
-목적하는 탐색 키를 가진 항목을 찾는 것 : 탐색 키(search key): 자료를 구별하여 인식할 수 있는 키
-검색의종류
 1 순차 검색 2 이진 검색 3 해쉬
 
 -검색과정
 첫 번째 원소부터 순서대로 검색 대상과 키 값이 같은 원소가 있는지 비교하며 찾는다.
 키 값이 동일한 원소를 찾으면 그 원소의 인덱스를 반환한다.
 자료구조의 마지막에 이를 때까지 검색 대상을 찾지 못하면 검색 실패
 
arr =[]
 Search(arr, key, N)
 for i in 0->N-1 #0에서 N-1 range(0, N-1)
    if arr[i] == key
        return i
    else:
        return -1

정렬되어 있지 않은 경우
-찾고자 하는 원소의 순서에 따라 비교회수가 결정됨
첫 번째 원소를 찾을 때는 1전 비교, 두 번째 원소를 찾을 때는 2번 비교..
정렬되지 않은 자료에서의 순차 검색의 평균 비교 회수
     (1/n)*(1+2+3+ ~ +n) =(n +1 )/2
시간 복잡도:O(n)

구현 예
def sequentialSearch(a, n, key)
    i <- 0
    while i < n and a[i]! = key:
        i <- i+1
    if i < n : return i
    else: return -1
    
-정렬되어 있는 경우
검색과정
자료가 오름차순으로 정렬된 상태에서 검색을 실시한다고 가정하자.
자료를 순차적으로 검색하면서 키 값을 비교하여, 원소의 키 값이 검색 대상의
키 값보다 크면 찾는 원소가 없다는 것이므로 더 이상 검색하지 않고 검색을 종료한다.

이진 검색
-자료의 가운데에 있는 항목의 키 값과 비교하여 다음 검색의 위치를 결정하고 검색을 계속 진행하는 방법
*목적 키를 찾을 때 까지 이진 검색을 순환적으로 반복 수행함으로써 검색 범위를 반으로 줄여가면서 보다
빠르게 검색을 수행함
-이진 검색을 하기 위해서는 자료가 정렬된 상태여야 한다.
-검색과정
1 중앙에 있는 원소를 고른다.
2 중앙 원소의 값과 찾고자 하는 목표 값을 비교한다.
3 목표 값이 중앙 원소의 값보다 작으면 자료의 왼쪽 반에 대해서 새로 검색을 수행하고, 크다면
  자료의 오른쪽 반에 대해서 새로 검색을 수행한다.
찾고자 하는 값을 찾을때까지 1~3의 과정을 반복한다.

-구현
검색 범위의 시작점과 종료점을 이용하여 검색을 반복 수행한다.
이진 검색의 경우, 자료에 삽입이나 삭제가 발생했을 때 배열의 상태를 항상 정렬 상태로 유지하는 추가 작업이 필요하다

-이진 검색 알고리즘
def binarySearch(a, N, key) #a= 검색 대상 N = 초기 크기 key = 찾고자하는 대상
    start = 0
    end = N-1
    while start <= end:
        middle = (start + end) // 2
        if a[middle] == key : #검색 성공
            return true
        elif a[middle] > key :
            end - middle - 1
        else:
            start = middle + 1
    return false            #검색실패    
  
  내일 문제중 미들 포함해서 뭐 하는 것이 있을 것이다.
  
'''

#연습문제 1번 델타로 연습하기

#델타를 이용한 2차 배열 탐색
# -2차 배열의 한 좌표에서 4방향의 인접 배열 요소를 탐색하는 방법
# arr[0...N-1][0....N-1] #NxN배열
# di[] <- [0, 0, -1, ,] #상하좌우
# dj[] <- [-1, 1, 0, 0]
# for i : 1 -> N-1
#     for j : 1 -> N-1 :
#         for k in range(4): #이웃한 칸 총 4개 이웃은 정하기 다름
#             ni <- i + di[k]
#             nj <- j + dj[k]
#             if 0<= ni < N and 0<=nj<N #유효한 인댁스면
#                 test(arr[ni][nj])

di = [0, 1, 0, -1]
dj = [1, 0, -1, 0]
N = 3
M = 4
arr = [[1,2,3,4], [4,5,6,8]]
for i in range(N):
    for j in range(M):
        for k in range(4):
            ni = i + di[k]
            nj = j + dj[k]
            if 0<=ni<N and 0<=nj<M:
                print(ni,nj)